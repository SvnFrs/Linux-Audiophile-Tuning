#!/bin/bash

[ -e /etc/mpd.conf.sav ] && mpd_conf=/etc/mpd.conf.sav || mpd_conf=/etc/mpd.conf
[ -e /etc/upmpdcli.conf.sav ] && upmpdcli_conf=/etc/upmpdcli.conf.sav || upmpdcli_conf=/etc/upmpdcli.conf
spotifyd_conf=/etc/spotifyd.conf
audio_conf=/etc/default/audio.conf

ethernet_ip () {
i=$(whiptail --title "Ethernet IP / 유선 IP 설정" --menu "Select/선택" --ok-button "OK/확인" --cancel-button "Cancel/취소" --backtitle "Audio-config" 10 45 2 \
"1" "Dynamic IP (DHCP)       자동 IP" \
"2" "Static  IP              수동 IP   >" 3>&1 1>&2 2>&3)

[ -n "$(which connmanctl)" ] && eth=$(connmanctl services | grep -om1 ethernet.*)

case $i in
 1) connmanctl config $eth --ipv4 dhcp ;;
 2) user_ip=$(whiptail --title "Ethernet IP / 유선 IP 설정" --inputbox "\

Input Static IP address to use.       사용할 수동 IP를 입력합니다.
Current IP is listed below.           아래는 현재 주소입니다.
Otherwise, 192.168.0.9 will be used.  아니면 192.168.0.9로 설정합니다." --ok-button "OK/확인" --cancel-button "Cancel/취소" --backtitle "Audio-config" 11 75 $(hostname -I) 3>&1 1>&2 2>&3)
    exitstatus=$?
    if [ "$exitstatus" = 0 ]; then
     if [ -z "$user_ip" ]; then
      ip_1st=$(echo "$(hostname -I)" | cut -d "." -f1)
      ip_2nd=$(echo "$(hostname -I)" | cut -d "." -f2)
      ip_3rd=$(echo "$(hostname -I)" | cut -d "." -f3)
      ip_4th=$(echo "$(hostname -I)" | cut -d "." -f4)
     else
      ip_1st=$(echo "$user_ip" | cut -d "." -f1)
      ip_2nd=$(echo "$user_ip" | cut -d "." -f2)
      ip_3rd=$(echo "$user_ip" | cut -d "." -f3)
      ip_4th=$(echo "$user_ip" | cut -d "." -f4)
     fi
     if [ "$ip_1st" -ge "1" ] 2>/dev/null && [ "$ip_1st" -le "254" ] 2>/dev/null && [ "$ip_1st" -ne "127" ] 2>/dev/null && [ "$ip_2nd" -ge "0" ] 2>/dev/null && [ "$ip_2nd" -le "255" ] 2>/dev/null && [ "$ip_3rd" -ge "0" ] 2>/dev/null && [ "$ip_3rd" -le "255" ] 2>/dev/null && [ "$ip_4th" -ge "2" ] 2>/dev/null && [ "$ip_4th" -le "254" ] 2>/dev/null ; then
      ip=$ip_1st.$ip_2nd.$ip_3rd
      ip_all=$ip_1st.$ip_2nd.$ip_3rd.$ip_4th
     else
      ip=192.168.0
      ip_all=192.168.0.9
     fi
     connmanctl config $eth --ipv4 manual $ip_all 255.255.255.0 $ip.1
     systemctl disable dhcpcd.service
    fi ;;
esac
}

wifi_client () {
i=$(whiptail --title "Wi-Fi Client / 무선 연결" --menu "Select/선택" --ok-button "OK/확인" --cancel-button "Cancel/취소" --backtitle "Audio-config" 10 50 2 \
"1" "Enable  Wi-Fi       무선 연결        >" \
"2" "Disable Wi-Fi       무선 연결 안 함" 3>&1 1>&2 2>&3)
#"0" "Scan    Wi-Fi       무선 검색" \

[ -n "$(which connmanctl)" ] && eth=$(connmanctl services | grep -om1 ethernet.*)

case $i in
 0) wpa_cli -iwlan0 scan && echo "$(wpa_cli scan_results)" > ~/scan_wifi.txt
    whiptail --title "Scan Wi-Fi / 무선 검색" --scrolltext --textbox ~/scan_wifi.txt --ok-button "OK/확인" --backtitle "Audio-config" 18 75 ;;
 1) wifi=$(whiptail --title "Wi-Fi Client / 무선 연결" --inputbox "\

Input AP and password to use.   공유기와 비밀번호를 입력합니다.
Use space in between.           사이에 빈 칸을 입력합니다." --ok-button "OK/확인" --cancel-button "Cancel/취소" --backtitle "Audio-config" 11 67 "AP password" 3>&1 1>&2 2>&3)
    exitstatus=$?
    if [ "$exitstatus" = 0 ]; then
     ap=$(echo "$wifi" | cut -d " " -f1)
     pass=$(echo "$wifi" | rev | cut -d " " -f1 | rev)
    fi
    if [ -n "$ap" ] && [ -n "$pass" ]; then
     wpa_passphrase $ap $pass >> /etc/wpa_supplicant/wpa_supplicant.conf
     systemctl unmask wpa_supplicant
     systemctl start  wlan_dhcp
     systemctl start  wpa_supplicant
     systemctl enable wlan_dhcp
     systemctl enable wpa_supplicant
     dhclient wlan0
    fi ;;
 2) sed -i '/^network={/,$d' /etc/wpa_supplicant/wpa_supplicant.conf
    systemctl disable wpa_supplicant
    systemctl disable wlan_dhcp
    systemctl mask    wpa_supplicant ;;
esac
}

mpd_options () {
i=$(whiptail --title "MPD options / MPD 옵션" --checklist "Check/확인" --ok-button "OK/확인" --cancel-button "Cancel/취소" --backtitle "Audio-config" 11 70 4 \
"dop"      "Enable DoP (DSD over PCM)   DoP 사용" $(grep -q '^dop' $mpd_conf && echo ON || echo OFF) \
"tag"      "Enable Metadata             태그 사용" $(grep -q '^metadata.*none' $mpd_conf && echo OFF || echo ON) \
"pcm"      "Enable Raw PCM              Raw PCM 사용" $(grep -A1 'plugin.*pcm' $mpd_conf | grep -q yes - && echo ON || echo OFF) \
"vol"      "Enable Software Volume      소프트웨어 볼륨 사용" $(grep -q 'mixer_type.*software' $mpd_conf && echo ON || echo OFF) 3>&1 1>&2 2>&3)

exitstatus=$?
if [ "$exitstatus" = 0 ]; then
 [[ $i =~ dop    ]] && sed -i '/dop/s/^#*//g' $mpd_conf || sed -i '/dop/s/^/#/g' $mpd_conf
 [[ $i =~ tag    ]] && sed -i '/metadata.*none/s/^/#/' $mpd_conf || sed -i '/metadata.*none/s/^#*//' $mpd_conf
 [[ $i =~ pcm    ]] && sed -i '/plugin.*pcm/!b;n;s/".*"/"yes"/' $mpd_conf || sed -i '/plugin.*pcm/!b;n;s/".*"/"no"/' $mpd_conf
 [[ $i =~ vol    ]] && sed -i '/mixer_type/s/".*"/"software"/' $mpd_conf || sed -i '/mixer_type/s/".*"/"none"/' $mpd_conf
fi
}

upnp_roon_air () {
i=$(whiptail --title "UPnP, Roon Bridge, AirPlay" --checklist "Check/확인" --ok-button "OK/확인" --cancel-button "Cancel/취소" --backtitle "Audio-config" 10 59 3 \
"upnp"      "Enable UPnP          UPnP 사용" $(grep -q 'upnp=on' $audio_conf && echo ON || echo OFF) \
"roon"      "Enable Roon Bridge   룬 브리지 사용" $(grep -q 'roon=on' $audio_conf && echo ON || echo OFF) \
"airplay"   "Enable AirPlay       에어플레이 사용" $(grep -q 'airplay=on' $audio_conf && echo ON || echo OFF) 3>&1 1>&2 2>&3)

exitstatus=$?
if [ "$exitstatus" = 0 ]; then
 [[ $i =~ upnp ]] && sed -i '/upnp=/s/=.*/=on/' $audio_conf || sed -i '/upnp=/s/=.*/=off/' $audio_conf
 [[ $i =~ roon ]] && sed -i '/roon=/s/=.*/=on/' $audio_conf || sed -i '/roon=/s/=.*/=off/' $audio_conf
 [[ $i =~ airplay ]] && sed -i '/airplay=/s/=.*/=on/' $audio_conf || sed -i '/airplay=/s/=.*/=off/' $audio_conf
fi
}

spotifyd () {
while true; do

i=$(whiptail --title "Spotify / Spotify 설정" --menu "\
Select/선택

    To disable spotify, just remove username or password.
  사용자나 비밀번호를 지우면 스포티파이를 사용하지 않습니다." --ok-button "OK/확인" --cancel-button "Cancel/취소" --backtitle "Audio-config" 14 66 3 \
"1"  "Spotify ┬ device name     장치 이름     >" \
"2"  "        │ username        사용자        >" \
"3"  "        └ password        비밀번호      >" 3>&1 1>&2 2>&3)

exitstatus=$?
[ "$exitstatus" != 0 ] && return

case $i in
 1) spotify_device=$(grep device_name $spotifyd_conf | cut -d' ' -f3)
    input_user=$(whiptail --title "Spotify device name / Spotify 장치 이름" --inputbox "\

Input Spotify device name.   Spotify 장치 이름을 입력합니다." --ok-button "OK/확인" --cancel-button "Cancel/취소" --backtitle "Audio-config" 10 64 $spotify_device 3>&1 1>&2 2>&3)
    exitstatus=$?
    if [ "$exitstatus" = 0 ]; then
     if [ -n "$input_user" ]; then
      sed -i '/device_name/s/=.*/= '"$input_user"'/' $spotifyd_conf
     fi
    fi ;;
 2) spotify_user=$(grep username $spotifyd_conf | cut -d' ' -f3)
    input_user=$(whiptail --title "Spotify username / Spotify 사용자" --inputbox "\

Input Spotify username.   Spotify 사용자를 입력합니다." --ok-button "OK/확인" --cancel-button "Cancel/취소" --backtitle "Audio-config" 10 58 $spotify_user 3>&1 1>&2 2>&3)
    exitstatus=$?
    if [ "$exitstatus" = 0 ]; then
     if [ -n "$input_user" ]; then
      sed -i '/username/s/=.*/= '"$input_user"'/' $spotifyd_conf
      sed -i '/spotify/s/=.*/=on/'  $audio_conf
     else
      sed -i '/spotify/s/=.*/=off/' $audio_conf
     fi
    fi ;;
 3) spotify_pwd=$(grep password $spotifyd_conf | cut -d' ' -f3)
    input_pwd=$(whiptail --title "Spotify password / Spotify 비밀번호" --inputbox "\

Input Spotify password.   Spotify 비밀번호를 입력합니다." --ok-button "OK/확인" --cancel-button "Cancel/취소" --backtitle "Audio-config" 10 60 $spotify_pwd 3>&1 1>&2 2>&3)
    exitstatus=$?
    if [ "$exitstatus" = 0 ]; then
     if [ -n "$input_pwd" ]; then
      sed -i '/password/s/=.*/= '"$input_pwd"'/' $spotifyd_conf
      sed -i '/spotify/s/=.*/=on/'  $audio_conf
     else
      sed -i '/spotify/s/=.*/=off/' $audio_conf
     fi
    fi ;;
esac

done
}

renderer_name () {
 current_name=$(grep ^#*friendlyname $upmpdcli_conf | cut -d ' ' -f3)
 i=$(whiptail --title "Change renderer name / 렌더러 이름 바꾸기" --inputbox "\

Input renderer name to change.   바꿀 렌더러 이름을 입력합니다." --ok-button "OK/확인" --cancel-button "Cancel/취소" --backtitle "Audio-config" 9 67 $current_name 3>&1 1>&2 2>&3)
 [ "$i" != $current_name ] && [ "$i" != "" ] && sed -i 's/^#*friendlyname.*/friendlyname = '"$i"'/' $upmpdcli_conf
}

upmpd_qobuz () {
while true; do

i=$(whiptail --title "Upmpdcli Qobuz / Qobuz 설정" --menu "\
Select/선택

    To disable Qobuz, just remove username or password.
   사용자나 비밀번호를 지우면 Qobuz를 사용하지 않습니다." --ok-button "OK/확인" --cancel-button "Cancel/취소" --backtitle "Audio-config" 14 63 3 \
"1"  "Qobuz ┬ username        사용자        >" \
"2"  "      │ password        비밀번호      >" \
"3"  "      └ Format ID       포맷 ID       >" 3>&1 1>&2 2>&3)

exitstatus=$?
[ "$exitstatus" != 0 ] && return

case $i in
 1) qobuz_user=$(grep "qobuzuser =" $upmpdcli_conf | cut -d' ' -f3-)
    input_user=$(whiptail --title "Qobuz username / Qobuz 사용자" --inputbox "\

Input Qobuz username.   Qobuz 사용자를 입력합니다." --ok-button "OK/확인" --cancel-button "Cancel/취소" --backtitle "Audio-config" 10 54 "$qobuz_user" 3>&1 1>&2 2>&3)
    exitstatus=$?
    if [ "$exitstatus" = 0 ]; then
     if [ -n "$input_user" ]; then
      ! [ -e /usr/share/upmpdcli/cdplugins/qobuz/qobuz-app.py ] && echo "Installing upmpdcli-qobuz..." && sudo dpkg -i /home/pi/upmpdcli-qobuz*.deb
      sudo sed -i '/qobuzuser =/s/^#*//; /qobuzuser =/s/=.*/= '"$input_user"'/' $upmpdcli_conf
     else
      sudo sed -i '/qobuzuser =/s/^/#/; /qobuzuser =/s/=.*/=/' $audio_conf
      [ -e /usr/share/upmpdcli/cdplugins/qobuz/qobuz-app.py ] && echo "Uninstalling upmpdcli-qobuz..." && sudo dpkg -r /home/pi/upmpdcli-qobuz*.deb
     fi
    fi ;;
 2) qobuz_pwd=$(grep "qobuzpass =" $upmpdcli_conf | cut -d' ' -f3-)
    input_pwd=$(whiptail --title "Qobuz password / Qobuz 비밀번호" --inputbox "\

Input Qobuz password.   Qobuz 비밀번호를 입력합니다." --ok-button "OK/확인" --cancel-button "Cancel/취소" --backtitle "Audio-config" 10 56 "$qobuz_pwd" 3>&1 1>&2 2>&3)
    exitstatus=$?
    if [ "$exitstatus" = 0 ]; then
     if [ -n "$input_pwd" ]; then
      ! [ -e /usr/share/upmpdcli/cdplugins/qobuz/qobuz-app.py ] && echo "Installing upmpdcli-qobuz..." && sudo dpkg -i /home/pi/upmpdcli-qobuz*.deb
      sudo sed -i '/qobuzpass =/s/^#*//; /qobuzpass =/s/=.*/= '"$input_user"'/' $upmpdcli_conf
     else
      sudo sed -i '/qobuzpass =/s/^/#/; /qobuzpass =/s/=.*/=/' $audio_conf
      [ -e /usr/share/upmpdcli/cdplugins/qobuz/qobuz-app.py ] && echo "Uninstalling upmpdcli-qobuz..." && sudo dpkg -r /home/pi/upmpdcli-qobuz*.deb
     fi
    fi ;;
 3) i=$(whiptail --title "Qobuz format ID / Qobuz 포맷 ID" --menu "Select/선택" --ok-button "OK/확인" --cancel-button "Cancel/취소" --backtitle "Audio-config" 11 52 3 \
"1" " 5 - mp3/320" \
"2" " 7 - FLAC" \
"3" "27 - hi-res" 3>&1 1>&2 2>&3)

    case $i in
     1) sudo sed -i '/qobuzformatid =/s/=.*/= 5/'  $upmpdcli_conf ;;
     2) sudo sed -i '/qobuzformatid =/s/=.*/= 7/'  $upmpdcli_conf ;;
     3) sudo sed -i '/qobuzformatid =/s/=.*/= 27/' $upmpdcli_conf ;;
    esac ;;
esac

done
}

upmpd_tidal () {
while true; do

i=$(whiptail --title "Upmpdcli Tidal / Tidal 설정" --menu "\
Select/선택

    To disable Tidal, just remove username or password.
   사용자나 비밀번호를 지우면 Tidal을 사용하지 않습니다." --ok-button "OK/확인" --cancel-button "Cancel/취소" --backtitle "Audio-config" 14 63 3 \
"1"  "Tidal ┬ username        사용자        >" \
"2"  "      │ password        비밀번호      >" \
"3"  "      └ quality         품질          >" 3>&1 1>&2 2>&3)

exitstatus=$?
[ "$exitstatus" != 0 ] && return

case $i in
 1) tidal_user=$(grep "tidaluser =" $upmpdcli_conf | cut -d' ' -f3-)
    input_user=$(whiptail --title "Tidal username / Tidal 사용자" --inputbox "\

Input Tidal username.   Tidal 사용자를 입력합니다." --ok-button "OK/확인" --cancel-button "Cancel/취소" --backtitle "Audio-config" 10 54 "$tidal_user" 3>&1 1>&2 2>&3)
    exitstatus=$?
    if [ "$exitstatus" = 0 ]; then
     if [ -n "$input_user" ]; then
      ! [ -e /usr/share/upmpdcli/cdplugins/tidal/tidal-app.py ] && echo "Installing upmpdcli-tidal..." && sudo dpkg -i /home/pi/upmpdcli-tidal*.deb
      sudo sed -i '/tidaluser =/s/^#*//; /tidaluser =/s/=.*/= '"$input_user"'/' $upmpdcli_conf
     else
      sudo sed -i '/tidaluser =/s/^/#/; /tidaluser =/s/=.*/=/' $audio_conf
      [ -e /usr/share/upmpdcli/cdplugins/tidal/tidal-app.py ] && echo "Uninstalling upmpdcli-tidal..." && sudo dpkg -r /home/pi/upmpdcli-tidal*.deb
     fi
    fi ;;
 2) tidal_pwd=$(grep "tidalpass =" $upmpdcli_conf | cut -d' ' -f3-)
    input_pwd=$(whiptail --title "Tidal password / Tidal 비밀번호" --inputbox "\

Input Tidal password.   Tidal 비밀번호를 입력합니다." --ok-button "OK/확인" --cancel-button "Cancel/취소" --backtitle "Audio-config" 10 56 "$tidal_pwd" 3>&1 1>&2 2>&3)
    exitstatus=$?
    if [ "$exitstatus" = 0 ]; then
     if [ -n "$input_pwd" ]; then
      ! [ -e /usr/share/upmpdcli/cdplugins/tidal/tidal-app.py ] && echo "Installing upmpdcli-tidal..." && sudo dpkg -i /home/pi/upmpdcli-tidal*.deb
      sudo sed -i '/tidalpass =/s/^#*//; /tidalpass =/s/=.*/= '"$input_user"'/' $upmpdcli_conf
     else
      sudo sed -i '/tidalpass =/s/^/#/; /tidalpass =/s/=.*/=/' $audio_conf
      [ -e /usr/share/upmpdcli/cdplugins/tidal/tidal-app.py ] && echo "Uninstalling upmpdcli-tidal..." && sudo dpkg -r /home/pi/upmpdcli-tidal*.deb
     fi
    fi ;;
 3) i=$(whiptail --title "Tidal quality / Tidal 품질" --menu "Select/선택" --ok-button "OK/확인" --cancel-button "Cancel/취소" --backtitle "Audio-config" 11 52 3 \
"1" "low" \
"2" "high" \
"3" "loseless" 3>&1 1>&2 2>&3)

    case $i in
     1) sudo sed -i '/tidalquality =/s/=.*/= low/'      $upmpdcli_conf ;;
     2) sudo sed -i '/tidalquality =/s/=.*/= high/'     $upmpdcli_conf ;;
     3) sudo sed -i '/tidalquality =/s/=.*/= loseless/' $upmpdcli_conf ;;
    esac ;;
esac

done
}

while true; do
 i=$(whiptail --title "Audio-config / 오디오 설정" --menu "Choose/선택" --ok-button "OK/확인" --cancel-button "Exit/나가기" --backtitle "Audio-config" 17 70 10 \
"1"  "Ethernet IP                   유선 IP 설정                 >" \
"2"  "Wi-Fi client                  무선 연결                    >" \
"3"  "MPD options                   MPD 옵션                     >" \
"4"  "UPnP, Roon Bridge, Airplay    UPnP, 룬 브리지, 에어플레이  >" \
"5"  "Spotify                       스포티파이                   >" \
"6"  "Upmpdcli Qobuz                Qobuz 설정                   >" \
"7"  "Upmpdcli Tidal                Tidal 설정                   >" \
"8"  "Change renderer name          렌더러 이름 바꾸기           >" \
"9"  "Reboot                        다시 시작" \
"10" "Power off                     전원 끄기" 3>&1 1>&2 2>&3)

 exitstatus=$?
 [ "$exitstatus" != 0 ] && break

 case $i in
  1)  ethernet_ip ;;
  2)  wifi_client ;;
  3)  mpd_options ;;
  4)  upnp_roon_air ;;
  5)  spotifyd ;;
  6)  upmpd_qobuz ;;
  7)  upmpd_tidal ;;
  8)  renderer_name ;;
  9)  reboot ;;
  10) poweroff ;;
 esac
done

if (whiptail --title "Reboot / 다시 시작" --yes-button "Yes/예" --no-button "No/아니오" --yesno "  To take effect,         바뀐 설정을 적용하려면,
  reboot is necessary.    다시 시작해야 합니다.

  Reboot this system?     시스템을 다시 시작할까요?" 10 57); then
 sudo reboot
fi
