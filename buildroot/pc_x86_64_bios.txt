Buildroot

https://buildroot.org/
https://buildroot.org/docs.html
https://buildroot.org/download.html

http://git.buildroot.net/buildroot/
https://github.com/buildroot/buildroot

$ cd buildroot-2019.05.2/
$ make help
$ make list-defconfigs (184 pre-defined boards for Buildroot 2018.8)
$ make menuconfig
$ make # make 2>&1 | tee build.log

PC x86 64 bios

$ cd ../
$ mkdir pc_x86_64_bios && cd pc_x86_64_bios && mkdir rootfs-overlay
$ cp ../buildroot-2019.05.2/configs/pc_x86_64_bios_defconfig .config
$ make -C ../buildroot-2019.05.2 O=$(pwd) menuconfig
$ make # BR2_PACKAGE_COREUTILS=y BR2_PACKAGE_PROCPS_NG=y BR2_PACKAGE_ALSA_LIB_MIXER=

1. Menuconfig

$ make menuconfig

Build Options --->
 [ ] strip target binaries
 gcc optimization level (optimization level 2)

Toolchain --->
 C library (uClibc-ng) --->
  (X) glibc
 [*] Enable WCHAR support
 [*] Enable C++ support

System configuration --->
 /dev management (Dynamic using devtmpfs + mdev) --->
  (X) Dynamic using devtmpfs + mdev
 [*] Enable root login with password
 () Root password
 [*] Run a getty (login prompt) after boot ---
 ($(CONFIG_DIR)/rootfs-overlay) Root filesystem overlay directories
 ($(CONFIG_DIR)/post-build.sh) Custom scripts to run before creating filesystem images
 () Custom scripts to run inside the fakeroot environment

Target packages --->
 [*] Show packages that are also provided by busybox
 Hardware handling --->
  Firmware --->
   [*] linux-firmware
    WiFi firmware --->
 Networking applications  --->
  [*] connman
   [ ] enable WiFi support
  [*] crda
  [*] wpa_supplicant
   [*] Enable nl80211 support
 coreutils, procps_ng, psmisc
 System tools --->
  -*- util-linux --->
   [*] scheduling utilities (chrt, ionice, taskset)
 dropbear, ca_certificates, curl, nano
 alsa_lib, mpd, mpd_mpc, ncmpc, upmpdcli

Filesystem images --->
 (512M) exact size

2. Linux-menuconfig

$ make linux-menuconfig

Device Drivers --->
 [*] Network device support --->
  [*]   Wireless LAN --->
   <M> Intel Wireless WiFi DVM Firmware support
 <*> Sound card support --->
  <*> Advanced Linux Sound Architecture --->
   HD-Audio --->
    < > HD Audio PCI
   [*] USB sound devices --->
    <*> USB Audio/MIDI driver
    <*> M2Tech hiFace USB-SPDIF driver

3. Install Packages

coreutils, procps_ng, psmisc, dropbear(SSH), ca_certificates
alsa_lib, mpd, mpd_mpc, ncmpc, upmpdcli
curl, nano, bc

$ grep 'CONFIG_IONICE\|CONFIG_TASKSET' ../buildroot-2019.05.2/package/busybox/busybox.config
$ sed -i 's/.*CONFIG_IONICE.*/CONFIG_IONICE=y/; s/.*CONFIG_TASKSET.*/CONFIG_TASKSET=y/' ../buildroot-2019.05.2/package/busybox/busybox.config
$ grep 'CONFIG_IONICE\|CONFIG_TASKSET' ../buildroot-2019.05.2/package/busybox/busybox.config

CONFIG_IONICE=y
CONFIG_TASKSET=y

$ nano packages.frag

BR2_PACKAGE_COREUTILS=y
BR2_PACKAGE_PROCPS_NG=y
BR2_PACKAGE_PSMISC=y
BR2_PACKAGE_DROPBEAR=y
BR2_PACKAGE_CA_CERTIFICATES=y
BR2_PACKAGE_ALSA_LIB=y
BR2_PACKAGE_ALSA_LIB_PCM=y
BR2_PACKAGE_ALSA_LIB_PCM_PLUGINS=hw
BR2_PACKAGE_ALSA_LIB_CTL_PLUGINS=hw
BR2_PACKAGE_MPD=y
BR2_PACKAGE_MPD_ALSA=y
BR2_PACKAGE_MPD_AUDIOFILE=y
BR2_PACKAGE_MPD_CURL=y
BR2_PACKAGE_MPD_DSD=y
BR2_PACKAGE_MPD_FFMPEG=y
BR2_PACKAGE_MPD_FLAC=y
BR2_PACKAGE_MPD_LIBMPDCLIENT=y
BR2_PACKAGE_MPD_TCP=y
BR2_PACKAGE_MPD_UPNP=y
BR2_PACKAGE_MPD_MPC=y
BR2_PACKAGE_NCMPC=y
BR2_PACKAGE_CURL=y
BR2_PACKAGE_NANO=y
BR2_PACKAGE_BC=y

4. Rootfs Overlay

$ mkdir -p rootfs-overlay/etc/init.d rootfs-overlay/usr/bin/ rootfs-overlay/usr/share/upmpdcli rootfs-overlay/opt/RoonBridge

rootfs-overlay/etc/init.d/S99Zrc.local.sh
rootfs-overlay/etc/sysctl.conf
rootfs-overlay/etc/mpd.conf.sav
rootfs-overlay/etc/audio.conf

$ nano rootfs-overlay/etc/init.d/S99Zrc.local.sh

#!/bin/sh

[ -e /dev/shm/rc.local_on ] && exit || touch /dev/shm/rc.local_on

mpd_bg () {
 if [ "$mpd" != off ] || [ "$upnp" != off ]; then
  sec=0
  until [ $(pidof mpd) -gt 0 ] 2>/dev/null && $(pstree -npt $(pidof mpd) 2>/dev/null | grep -q output); do
   sleep 1
   sec=$(($sec+1))
   [ "$sec" -ge 5 ] && printf "\nMPD is not available!\n" && return
  done
  sleep 1
  pgr_mpd=$(pidof mpd)
  taskset -cp $m_task $pgr_mpd
  echo "$(pstree -npt $pgr_mpd)" | while read line ; do
   proc=$(echo "$line" | cut -d "{" -f2 | cut -d "}" -f1 | cut -d ":" -f1)
   proc_nr=$(echo "$line" | cut -d "}" -f2 | cut -d "(" -f2 | cut -d ")" -f1)
   case $proc in
    mpd)	taskset -cp $s_task $proc_nr ;;
    io)		taskset -cp $s_task $proc_nr ;;
    player)	taskset -cp $s_task $proc_nr ;;
    decoder)	taskset -cp $s_task $proc_nr ;;
    output)	taskset -cp $m_task $proc_nr
 		chrt -op 0	    $proc_nr ;;
   esac
  done
 fi
 eol &
 if [ "$upnp" != off ]; then
  cp /usr/bin/upmpdcli /etc/upmpdcli.conf /dev/shm/
  sleep 1
nohup /dev/shm/upmpdcli -c /dev/shm/upmpdcli.conf>/dev/null</dev/null 2>/dev/null
 fi
}

eol () {
 if [ "$upnp" != off ]; then
  sec=0
  until [ $(pidof upmpdcli) -gt 0 ] 2>/dev/null; do
   sleep 1
   sec=$(($sec+1))
   [ "$sec" -ge 5 ] && printf "\nUpmpdcli is not available!\n" && return
  done
 sleep 1
 taskset -cp $s_task $(pidof upmpdcli)
  echo "$(pstree -npt $(pidof upmpdcli))" | while read line ; do
   proc_nr=$(echo "$line" | cut -d "}" -f2 | cut -d "(" -f2 | cut -d ")" -f1)
   taskset -cp $s_task $proc_nr || true
  done
 fi
 echo "IP address is $(hostname -I)" || true
 pkill -x rcS || true
}

roonbridge_bg () {
 cp /usr/share/alsa/alsa.conf.roon /dev/shm/alsa.conf
#export ROON_DATAROOT=/var/roon
#export ROON_ID_DIR=/var/roon
#cd /opt/RoonBridge/Bridge
#/dev/shm/nohup /opt/RoonBridge/Bridge/RoonBridge
 /etc/init.d/roonbridge start
}

roonserver_bg () {
 cp /usr/share/alsa/alsa.conf.roon /dev/shm/alsa.conf
#export ROON_DATAROOT=/var/roon
#export ROON_ID_DIR=/var/roon
#cd /opt/RoonServer/Server
#/dev/shm/nohup /opt/RoonServer/Server/RoonServer
 /etc/init.d/roonserver start
}

spot_bg () {
 cp /usr/share/alsa/alsa.conf.roon /dev/shm/alsa.conf
 cp /usr/bin/spotifyd /etc/spotifyd.conf /dev/shm/
 nohup /dev/shm/spotifyd --no-daemon -c /dev/shm/spotifyd.conf>/dev/null</dev/null 2>/dev/null
}

air_bg () {
 cp /usr/share/alsa/alsa.conf.roon /dev/shm/alsa.conf
 /etc/init.d/_S99shairport-sync start
}

[ -r /etc/audio.conf ] && . /etc/audio.conf

[ "$log"  != on ] && /etc/init.d/S01logging stop
[ "$apci" != on ] && /etc/init.d/S02acpid stop
[ "$ssh"  != on ] && /etc/init.d/S50dropbear stop
[ "$wpa"  != on ] && pkill wpa_supplicant

[ -e /dev/snd/timer ] && rm /dev/snd/timer

cp /usr/lib/libasound.so.2.0.0.sav /dev/shm/libasound.so.2.0.0
ln -sf /dev/shm/libasound.so.2.0.0 /usr/lib/libasound.so.2.0.0
ln -sf /dev/shm/libasound.so.2.0.0 /usr/lib/libasound.so.2
ln -sf /dev/shm/libasound.so.2.0.0 /usr/lib/libasound.so
cp /usr/share/alsa/alsa.conf.sav /dev/shm/alsa.conf
ln -sf /dev/shm/alsa.conf /usr/share/alsa/alsa.conf
#cp /usr/bin/mpd /usr/bin/upmpdcli /etc/upmpdcli.conf /dev/shm/
#cp /etc/mpd.conf.sav /dev/shm/mpd.conf
cp /usr/lib/libaudiofile.so.1.0.0.sav /dev/shm/libaudiofile.so.1.0.0
ln -sf /dev/shm/libaudiofile.so.1.0.0 /usr/lib/libaudiofile.so.1.0.0
ln -sf /dev/shm/libaudiofile.so.1.0.0 /usr/lib/libaudiofile.so.1
ln -sf /dev/shm/libaudiofile.so.1.0.0 /usr/lib/libaudiofile.so
cp /usr/lib/libFLAC.so.8.3.0.sav /dev/shm/libFLAC.so.8.3.0
ln -sf /dev/shm/libFLAC.so.8.3.0 /usr/lib/libFLAC.so.8.3.0
ln -sf /dev/shm/libFLAC.so.8.3.0 /usr/lib/libFLAC.so.8
ln -sf /dev/shm/libFLAC.so.8.3.0 /usr/lib/libFLAC.so

echo none | tee /sys/block/mmcblk0*/queue/scheduler

for i in $(ps -eo pid,class,ni,comm | grep -i TS | awk '$3 < 0 {print $1}'); do
 renice -2 $i
done

for i in $(ps -eo pid,class,comm | grep -E '(FF|RR)' | awk '$3 !~ /migration|mpd/ {print $1}'); do
 chrt -op 0 $i
 renice  -3 $i
done

proc_all=$(nproc --all)
m_task=$(($proc_all-1)); h_task=0; s_task=0
[ "$m_task" -ge 3 ] && h_task=$((m_task-1)) && s_task=$((m_task-2)) && o_task=0-$(($m_task-3))

for i in $(awk '/ehci.*usb/{print +$1}' /proc/interrupts); do
 [ "$proc_all" -eq  2 ] && echo         "2" > /proc/irq/$i/smp_affinity || true && echo         "1" > /proc/irq/default_smp_affinity || true
 [ "$proc_all" -eq  4 ] && echo         "8" > /proc/irq/$i/smp_affinity || true && echo         "4" > /proc/irq/default_smp_affinity || true
 [ "$proc_all" -eq  6 ] && echo        "30" > /proc/irq/$i/smp_affinity || true && echo        "10" > /proc/irq/default_smp_affinity || true
 [ "$proc_all" -eq  8 ] && echo        "80" > /proc/irq/$i/smp_affinity || true && echo        "70" > /proc/irq/default_smp_affinity || true
 [ "$proc_all" -eq 12 ] && echo       "800" > /proc/irq/$i/smp_affinity || true && echo       "700" > /proc/irq/default_smp_affinity || true
 [ "$proc_all" -eq 20 ] && echo     "80000" > /proc/irq/$i/smp_affinity || true && echo     "70000" > /proc/irq/default_smp_affinity || true
 [ "$proc_all" -eq 24 ] && echo    "800000" > /proc/irq/$i/smp_affinity || true && echo    "700000" > /proc/irq/default_smp_affinity || true
 [ "$proc_all" -eq 28 ] && echo   "8000000" > /proc/irq/$i/smp_affinity || true && echo   "7000000" > /proc/irq/default_smp_affinity || true
 [ "$proc_all" -eq 32 ] && echo  "80000000" > /proc/irq/$i/smp_affinity || true && echo  "70000000" > /proc/irq/default_smp_affinity || true
 [ "$proc_all" -eq 36 ] && echo "800000000" > /proc/irq/$i/smp_affinity || true && echo "700000000" > /proc/irq/default_smp_affinity || true
done

if [ "$m_task" -ge 1 ];then
 for pid in $(ps -eo pid,comm | awk '$2 !~ /systemd$|mpd/ {print $1}'); do
  taskset -cp $o_task $pid 2>/dev/null || true
 done
fi

sysctl -p /etc/sysctl.conf
#echo 0 > /sys/fs/cgroup/cpuset/cpuset.sched_load_balance

swapoff -a

mknod -m 000 /dev/mixer c 1 4 && chown root:kmem /dev/mixer

if [ "$roonserver" = on ] && [ -e /opt/RoonServer/Server/RoonServer ]; then
 (roonserver_bg &) && sleep 3
fi

if [ "$roonserver" = off ] && [ "$roonbridge" = on ] && ([ -e /opt/RoonBridge/Bridge/RoonBridge ] || [ -e /opt/roon/Bridge/RoonBridge ]); then
 (roonbridge_bg &) && sleep 3
fi

if [ -x /usr/bin/spotifyd ] && [ "$spotify" = on ]; then
 (spot_bg &) && sleep 1
fi

if [ -x /etc/init.d/_S99shairport-sync ] && [ "$airplay" = on ]; then
 (air_bg &) && sleep 1
fi

taskset -cp $m_task 1

mpd_bg &
if [ "$mpd" != off ] || [ "$upnp" != off ]; then
 cp /usr/bin/mpd /dev/shm/
 cp /etc/mpd.conf.sav /dev/shm/mpd.conf
 sleep 1
nohup /dev/shm/mpd --no-daemon /dev/shm/mpd.conf>/dev/null</dev/null 2>/dev/null
fi

exit 0

$ chmod +x rootfs-overlay/etc/init.d/S99Zrc.local.sh

$ nano rootfs-overlay/etc/audio.conf

# audio.conf
#
# To enable a feature, set feature=on.
# To disable a feature, set feature=off.
# To ignore a feature, comment out the line by '#'.
# log, ssh and upnp is enabled while airplay and spotify is disabled by default.

log=off
acpi=off
ssh=off
wpa=off
mpd=on
upnp=on
#roonbridge=off
#roonserver=off
#airplay=off
#spotify=off

$ nano rootfs-overlay/etc/sysctl.conf

vm.dirty_writeback_centisecs = 0
vm.oom_dump_tasks = 0
vm.oom_kill_allocating_task = 1
vm.overcommit_memory = 1
vm.panic_on_oom = 2
vm.swappiness = 0
vm.vfs_cache_pressure = 0
kernel.printk = 0 0 0 0
kernel.sched_rr_timeslice_ms = 1
net.ipv4.tcp_sack = 0
net.ipv4.tcp_no_metrics_save = 1
#net.ipv6.conf.all.disable_ipv6 = 1

$ nano rootfs-overlay/etc/mpd.conf.sav

user "root"
metadata_to_use	"none"
zeroconf_enabled "no"
input {
plugin "file"
enabled "no"
}
input {
plugin "alsa"
enabled "no"
}
input {
plugin "ffmpeg"
enabled "no"
}
audio_output {
type "alsa"
name "ALSA"
device "pcm.0"
dop "yes"
auto_resample "no"
auto_channels "no"
auto_format "no"
mixer_device "/dev/mixer"
mixer_type "none"
replay_gain_handler "none"
}
decoder {
plugin	"pcm"
enabled "no"
}
playlist_plugin {
name "asx"
enabled "no"
}
playlist_plugin {
name "rss"
enabled "no"
}
playlist_plugin {
name "flac"
enabled "no"
}
audio_buffer_size "3683"
buffer_before_play "10.55969372980212839891001004021011%"

5. Post Build Shell Scripts

$ nano post-build.sh

#!/bin/sh

TARGET_DIR=$1
BOARD_DIR=./

#sed -i 's/^root::/root:8kfIfYHmcyQEE:/' $TARGET_DIR/etc/shadow
#sed -i 's/^root::/root:*:/' $TARGET_DIR/etc/shadow
#sed -i 's/^console/#console/' $TARGET_DIR/etc/inittab

[ -f "$TARGET_DIR/etc/init.d/S95mpd" ] && mv $TARGET_DIR/etc/init.d/S95mpd $TARGET_DIR/etc/init.d/_S95mpd
[ -f "$TARGET_DIR/etc/init.d/S99upmpdcli" ] && mv $TARGET_DIR/etc/init.d/S99upmpdcli $TARGET_DIR/etc/init.d/_S99upmpdcli

[ -d $TARGET_DIR/usr/share/alsa ] && [ ! -d $TARGET_DIR/usr/share/alsa.orig ] && mv $TARGET_DIR/usr/share/alsa $TARGET_DIR/usr/share/alsa.orig
[ -d $TARGET_DIR/usr/share/alsa ] && rm -rf $TARGET_DIR/usr/share/alsa
[ ! -d $TARGET_DIR/usr/share/alsa ] && mkdir -p $TARGET_DIR/usr/share/alsa
printf 'pcm.0.type hw pcm.0.card 0 pcm.0.device 0 pcm.0.subdevice 0 pcm.0.sync_ptr_ioctl 1 pcm.0.nonblock 1 defaults.pcm.minperiodtime 2757' > $TARGET_DIR/usr/share/alsa/alsa.conf.sav
[ -f $TARGET_DIR/etc/mpd.conf ] && mv $TARGET_DIR/etc/mpd.conf $TARGET_DIR/etc/mpd.conf.orig
[ -f $TARGET_DIR/etc/upmpdcli.conf ] && sed -i '/checkcontentformat =/s/^#//; /checkcontentformat =/s/= 1/= 0/' $TARGET_DIR/etc/upmpdcli.conf

for i in $TARGET_DIR/usr/lib/libasound.so.2.0.0 $TARGET_DIR/usr/lib/libaudiofile.so.1.0.0 $TARGET_DIR/usr/lib/libFLAC.so.8.3.0;do
 [ -e "$i" ] && mv "$i" "$i".sav
done

exit 0

$ chmod +x post-build.sh

$ cp kr2mpd sbs_dec.py rootfs-overlay/usr/bin/
$ cp icon.png rootfs-overlay/usr/share/upmdpcli/

6. Flashing

$ sudo fdisk -l
$ sudo umount /dev/sdb?
$ sudo dd status=progress if=/home/parkmino/Downloads/buildroot/pc_x86_64_bios/images/disk.img of=/dev/sdb
$ sync

$ mv ../images/sdcard.img ../images/buildroot_renderer_$(date +"%y.%m").img
$ zip ../images/buildroot_renderer_$(date +"%y.%m").zip ../images/buildroot_renderer_$(date +"%y.%m").img

7. Customization

7.1 Blacklist Modules

# nano /etc/modprobe.conf

blacklist ...

7.2 Static IP

# mv /etc/init.d/S45connman /etc/
# nano /etc/network/interfaces

auto enp3s0
iface enp3s0 inet static
address 192.168.0.10
netmask 255.255.255.0
gateway 192.168.0.1
dns-nameservers 8.8.8.8

7.3 Wi-Fi

/lib/modules/4.18.10/kernel/drivers/net/wireless/intel/iwlwifi/dvm/iwldvm.ko

# nano /etc/wpa_supplicant.conf

ctrl_interface=/var/run/wpa_supplicant
ap_scan=1

network={
   ssid="ssid"
   psk="pass"
}

# nano /etc/network/interfaces

auto enp3s0
iface enp3s0 inet dhcp

#auto wlp2s0
iface wlp2s0 inet dhcp
 pre-up wpa_supplicant -B -Dnl80211 -iwlp2s0 -c/etc/wpa_supplicant.conf
 post-down killall -q wpa_supplicant
 
# mv /etc/init.d/S45connman /etc/

# ifup wlp2s0

8. Spotifyd

$ nano post-build.sh
curl -s $(curl -s https://github.com/Spotifyd/spotifyd/releases/latest | cut -d\" -f2) | grep -m1 amd64 | cut -d\" -f2 | wget "https://github.com/$(cat -)"
unzip spotifyd*.zip -d $TARGET_DIR/usr/bin/ && rm spotifyd*.zip
#chmod +x $TARGET_DIR/usr/bin/spotifyd

$ nano rootfs-overlay/etc/spotifyd.conf

[global]
username = USER
password = PASS
backend = alsa
device = pcm.0
mixer = /dev/mixer
device_name = Spotifyd
#bitrate = 320

$ nano rootfs-overlay/etc/init.d/S99Zrc.local.sh

if [ "$spotify" = on ]; then
 cp /usr/share/alsa/alsa.conf.roon /dev/shm/alsa.conf
 cp /usr/bin/spotifyd /etc/spotifyd.conf /dev/shm/
 nohup /dev/shm/spotifyd --no-daemon -c /dev/shm/spotifyd.conf>/dev/null</dev/null 2>/dev/null
fi

$ Add premium account

$ sed -i '/username/s/=.*/= 사용자/; /password/s/=.*/= 비밀번호/' /etc/spotifyd.conf

9. Shairport-sync

$ make menuconfig
 [*] shairport-sync 
  [*] libsoxr support

$ nano post-build.sh

 sed -i '/_device =/s/^\/*//; /output_device =/s/".*";/"pcm.0";/; /mixer_device =/s/".*";/"\/dev\/null";/' $TRARGET_DIR/etc/shairport-sync.conf
#sed -i '/_format =/s/^\/*//; /output_format =/s/".*";/"S24";/' $TRARGET_DIR/etc/shairport-sync.conf   # 24Bit Only
 sed -i '/interpolation =/s/^\/*//; /interpolation =/s/".*";/"soxr";/' $TRARGET_DIR/etc/shairport-sync.conf
 sed -i '/convolution =\|loudness =/s/^\/*//; /convolution =\|loudness =/s/".*"/"no"/' $TRARGET_DIR/etc/shairport-sync.conf

#$ chmod -x $TRARGET_DIR/etc/init.d/S??shaiport-sync
$ mv $TRARGET_DIR/etc/init.d/S99shaiport-sync $TRARGET_DIR/etc/init.d/_S99shaiport-sync

$ nano rootfs-overlay/etc/init.d/S99Zrc.local.sh

if [ "$airplay" = on ]; then
 cp /usr/share/alsa/alsa.conf.roon /dev/shm/alsa.conf
 /etc/init.d/_S99shairport-sync start
fi

10. Roon Server

https://kb.roonlabs.com/LinuxInstall

$ wget http://download.roonlabs.com/builds/RoonServer_linuxx64.tar.bz2
$ wget http://download.roonlabs.com/builds/roonserver-installer-linuxx64.sh
$ tar xvjf RoonServer_linuxx64.tar.bz2 /home/parkmino/Downloads/buildroot/pc_x86_64_bios/rootfs-overlay/opt/RoonServer
$ nano roofs-overlay/etc/init.d/roonserver

DAEMON_EXECUTABLE="/opt/RoonServer/Server/RoonServer"
#DAEMON_EXECUTABLE="/opt/$PACKAGE_NAME/start.sh"
DAEMON_HOMEDIR="/opt/RoonServer/Server"
#DAEMON_HOMEDIR="/opt/$PACKAGE_NAME"

$ chmod +x roofs-overlay/etc/init.d/roonserver
$ nano /home/parkmino/Downloads/buildroot/pc_x86_64_bios/rootfs-overlay/etc/init.d/S99Zrc.local.sh

if [ "$roonserver" = on ] && [ -e /opt/RoonServer/Server/RoonServer ]; then
 cp /usr/share/alsa/alsa.conf.roon /dev/shm/alsa.conf
#cp /usr/lib/libasound.so.2.0.0.norm /dev/shm/libasound.so.2.0.0
#sleep 1
#export ROON_DATAROOT=/var/roon
#export ROON_ID_DIR=/var/roon
#cd /opt/RoonServer/Server
#/dev/shm/nohup /opt/RoonServer/Server/RoonServer
##ROON_DATAROOT=/var/roon /opt/RoonServer/Server/RoonServer
/etc/init.d/roonserver start
fi

Filesystem images --->
 (1000M) exact size

11. Roon Bridge

https://kb.roonlabs.com/LinuxInstall

$ wget http://download.roonlabs.com/builds/RoonBridge_linuxx64.tar.bz2
$ wget http://download.roonlabs.com/builds/roonbridge-installer-linuxx64.sh
$ tar xvjf RoonBridge_linuxx64.tar.bz2 /home/parkmino/Downloads/buildroot/pc_x86_64_bios/rootfs-overlay/opt/RoonBridge
$ nano roofs-overlay/etc/init.d/roonbridge

DAEMON_EXECUTABLE="/opt/RoonBridge/Bridge/RoonBridge"
#DAEMON_EXECUTABLE="/opt/$PACKAGE_NAME/start.sh"
DAEMON_HOMEDIR="/opt/RoonBridge/Bridge"
#DAEMON_HOMEDIR="/opt/$PACKAGE_NAME"

$ chmod +x roofs-overlay/etc/init.d/roonbridge
$ nano /home/parkmino/Downloads/buildroot/pc_x86_64_bios/rootfs-overlay/etc/init.d/S99Zrc.local.sh

if [ "$roonserver" = off ] && [ "$roonbridge" = on ] && ([ -e /opt/RoonBridge/Bridge/RoonBridge ] || [ -e /opt/roon/Bridge/RoonBridge ]) ; then
#[ -d /opt/RoonBridge ] && [ ! -d /opt/roon ] && mv /opt/RoonBridge /opt/roon
#cp -r /opt/roon /dev/shm/
#ln -sf /dev/shm/roon /opt/RoonBridge
 cp /usr/share/alsa/alsa.conf.roon /dev/shm/alsa.conf
#cp /usr/lib/libasound.so.2.0.0.norm /dev/shm/libasound.so.2.0.0
#sleep 1
#export ROON_DATAROOT=/var/roon
#export ROON_ID_DIR=/var/roon
#cd /opt/RoonBridge/Bridge
#/dev/shm/nohup /opt/RoonBridge/Bridge/RoonBridge
##ROON_DATAROOT=/var/roon /opt/RoonBridge/Bridge/RoonBridge
/etc/init.d/roonbridge start
fi

12. Optional MPD

$ nano /etc/init.d/S99Zrc.local.sh

if [ -e /etc/audio.conf ]; then
     mpd=$(grep -m1 ^mpd=     /etc/audio.conf | cut -d\= -f2)
fi

[ "$mpd" != off ] || [ "$upnp" != off ] && nohup /dev/shm/mpd /dev/shm/mpd.conf>/dev/null</dev/null 2>/dev/null
[ "$upnp" != off ] && nohup /dev/shm/upmpdcli -c /dev/shm/upmpdcli.conf>/dev/null</dev/null 2>/dev/null